// Code generated by candi v1.11.5.

package usecase

import (
	"context"

	shareddomain "kuncie/pkg/shared/domain"
	"kuncie/pkg/shared/repository"
	"kuncie/pkg/shared/usecase/common"

	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/interfaces"
)

// ProductsUsecase abstraction
type ProductsUsecase interface {
	GetDetailProducts(ctx context.Context, id int) (data shareddomain.Products, err error)
	UpdateProducts(ctx context.Context, sku string, data *shareddomain.Products) (err error)
	Promotions(ctx context.Context, sku string, qty int) (data []shareddomain.Products, err error)
}

type productsUsecaseImpl struct {
	sharedUsecase common.Usecase
	cache         interfaces.Cache
	repoSQL       repository.RepoSQL
}

// NewProductsUsecase usecase impl constructor
func NewProductsUsecase(deps dependency.Dependency) (ProductsUsecase, func(sharedUsecase common.Usecase)) {
	uc := &productsUsecaseImpl{
		repoSQL: repository.GetSharedRepoSQL(),
	}
	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}
