// Code generated by candi v1.11.5.

package usecase

import (
	"context"

	"kuncie/internal/modules/products/domain"
	shareddomain "kuncie/pkg/shared/domain"

	"github.com/golangid/candi/tracer"
)

func (uc *productsUsecaseImpl) GetDetailProducts(ctx context.Context, id int) (data shareddomain.Products, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "ProductsUsecase:GetDetailProducts")
	defer trace.Finish()

	repoFilter := domain.FilterProducts{ID: id}
	data, err = uc.repoSQL.ProductsRepo().Find(ctx, &repoFilter)
	return
}

func (uc *productsUsecaseImpl) UpdateProducts(ctx context.Context, sku string, data *shareddomain.Products) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "ProductsUsecase:UpdateProducts")
	defer trace.Finish()

	repoFilter := domain.FilterProducts{Sku: sku}
	existing, err := uc.repoSQL.ProductsRepo().Find(ctx, &repoFilter)
	if err != nil {
		return err
	}

	data.ID = existing.ID
	data.Sku = existing.Sku
	data.Name = existing.Name
	data.Price = existing.Price
	data.CreatedAt = existing.CreatedAt

	err = uc.repoSQL.ProductsRepo().Save(ctx, data)
	return
}

func (uc *productsUsecaseImpl) Promotions(ctx context.Context, sku string, qty int) (data []shareddomain.Products, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "ProductsUsecase:Promotions")
	defer trace.Finish()

	repoFilter := domain.FilterProducts{Sku: sku}
	res, e := uc.repoSQL.ProductsRepo().Find(ctx, &repoFilter)
	if e != nil {
		err = e
		return
	}

	item := shareddomain.Products{
		ID:        res.ID,
		Sku:       sku,
		Name:      res.Name,
		Price:     res.Price * float64(qty),
		Stock:     qty,
		CreatedAt: res.CreatedAt,
		UpdatedAt: res.UpdatedAt,
	}

	if sku == "43N23P" { // macbook pro
		result, e := uc.repoSQL.ProductsRepo().Find(ctx, &domain.FilterProducts{Sku: "234234"})
		if e != nil {
			err = e
			return
		}

		quantity := qty

		if result.Stock == 0 {
			quantity = 0
		} else if result.Stock < qty {
			quantity = result.Stock
		}

		p := shareddomain.Products{
			ID:        result.ID,
			Sku:       result.Sku,
			Name:      result.Name,
			Price:     0,
			Stock:     quantity,
			CreatedAt: res.CreatedAt,
			UpdatedAt: res.UpdatedAt,
		}

		data = append(data, p)
	} else if sku == "120P90" { // google home
		if qty >= 3 {
			quantity := qty / 3

			item.Price = res.Price * float64(quantity*2)
		}
	} else if sku == "A304SD" { // alexa speaker
		if qty > 3 {
			price := res.Price * 10 / 100
			item.Price = (res.Price - price) * float64(qty)
		}
	}

	data = append(data, item)

	return
}
